<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[基于vmvare12虚拟机ContOS 7系统下搭建SVN版本控制系统]]></title>
      <url>/2019/01/30/%E5%9F%BA%E4%BA%8Evmvare12%E8%99%9A%E6%8B%9F%E6%9C%BAContOS%207%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BASVN/</url>
      <content type="html"><![CDATA[<p><strong> 基于vmvare12虚拟机ContOS 7系统下搭建SVN版本控制系统：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>    如果你有空闲主机，放着吃尘，如果你想拥有属于自己的云存储，永久存储自己的文档，那么我建议你看看这篇文章。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<p>虚拟机版本：vmvare 12<br>主宿机系统：Windows 7<br>虚拟机系统：ContOS 7</p>
<h5 id="关于安装虚拟机的部分跳过，操作相对简单，网上有很多教程，大同小异。"><a href="#关于安装虚拟机的部分跳过，操作相对简单，网上有很多教程，大同小异。" class="headerlink" title="关于安装虚拟机的部分跳过，操作相对简单，网上有很多教程，大同小异。"></a>关于安装虚拟机的部分跳过，操作相对简单，网上有很多教程，大同小异。</h5><h2 id="一、安装ContOS-7系统"><a href="#一、安装ContOS-7系统" class="headerlink" title="一、安装ContOS 7系统"></a>一、安装ContOS 7系统</h2><h4 id="1-1-点击文件-新建虚拟机-典型-下一步"><a href="#1-1-点击文件-新建虚拟机-典型-下一步" class="headerlink" title="1.1 点击文件 - 新建虚拟机 - 典型 - 下一步"></a>1.1 点击文件 - 新建虚拟机 - 典型 - 下一步</h4><p><img src="http://blog.zsonchen.cn/2019-01-29-16-51-24.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h4 id="1-2-安装程序光盘映像文件-下一步"><a href="#1-2-安装程序光盘映像文件-下一步" class="headerlink" title="1.2 安装程序光盘映像文件 - 下一步"></a>1.2 安装程序光盘映像文件 - 下一步</h4><p><strong>提前准备好的iso系统镜像文件，底部提供网盘下载链接。</strong><br><img src="http://blog.zsonchen.cn/2019-01-29-16-51-24.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h4 id="1-3-填写好登陆用户名与密码-下一步"><a href="#1-3-填写好登陆用户名与密码-下一步" class="headerlink" title="1.3 填写好登陆用户名与密码 - 下一步"></a>1.3 填写好登陆用户名与密码 - 下一步</h4><p><strong>账号密码用于登陆到系统的。</strong><br><img src="http://blog.zsonchen.cn//2019-01-29-16-51-44.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h4 id="1-4-选择虚拟机存储位置-下一步"><a href="#1-4-选择虚拟机存储位置-下一步" class="headerlink" title="1.4 选择虚拟机存储位置 - 下一步"></a>1.4 选择虚拟机存储位置 - 下一步</h4><p><strong>机械硬盘不要存储在c盘，不然装不下。</strong><br><img src="http://blog.zsonchen.cn//2019-01-29-16-53-01.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h4 id="1-5-指定存储大小"><a href="#1-5-指定存储大小" class="headerlink" title="1.5 指定存储大小"></a>1.5 指定存储大小</h4><p><strong>由于我们是用于存储文件的，有多大就用多大，不回占用硬盘的使用率，没有用到存储空间会释放出来。</strong><br><img src="http://blog.zsonchen.cn//2019-01-29-16-54-54.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h4 id="1-6-点击自定义硬件-把网络适配器更改为桥接模式"><a href="#1-6-点击自定义硬件-把网络适配器更改为桥接模式" class="headerlink" title="1.6 点击自定义硬件 - 把网络适配器更改为桥接模式"></a>1.6 点击自定义硬件 - 把网络适配器更改为桥接模式</h4><p><strong>桥接模式不用勾复制物理网络连接状态，如果此主机仅用于存储，可以把其他配置提到最优。</strong><br><img src="http://blog.zsonchen.cn//2019-01-29-21-30-46.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""><br><img src="http://blog.zsonchen.cn//2019-01-29-21-32-27.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""><br>完成，进入下一步。<br><strong> 如果出现”Intel VT-x 处于禁用状态”错误，需要先进入到主机的bios界面，把 intel vt 虚拟化设置为开启状态。具体打开方式问度娘，因为厂商不同，打开方式不同。</strong></p>
<h2 id="二、安装svn版本控制"><a href="#二、安装svn版本控制" class="headerlink" title="二、安装svn版本控制"></a>二、安装svn版本控制</h2><p>登陆到系统后，修改系统语言、连接网络都在设置里面操作，右键桌面打开终端</p>
<h4 id="2-1-获取root权限"><a href="#2-1-获取root权限" class="headerlink" title="2.1 获取root权限"></a>2.1 获取root权限</h4><p>进入到管理员角色，拥有root权限可以对很多系统文件夹进行操作。<br><code>su root</code><br>输入登陆密码，回车(密码是隐藏的，看不到*号照常输入就行）</p>
<h4 id="2-2-安装svn"><a href="#2-2-安装svn" class="headerlink" title="2.2 安装svn"></a>2.2 安装svn</h4><p><code>yum install -y subversion</code><br>通过使用yum 可以简单轻松的安装svn。</p>
<h4 id="2-3-检验svn是否安装成功"><a href="#2-3-检验svn是否安装成功" class="headerlink" title="2.3 检验svn是否安装成功"></a>2.3 检验svn是否安装成功</h4><p><code>svnserve --version</code><br>通过查看svn版本进行建议，打印出来不是报错信息，就说明安装成功，svnserve是svn服务的名称。</p>
<h4 id="2-4-创建版本库"><a href="#2-4-创建版本库" class="headerlink" title="2.4 创建版本库"></a>2.4 创建版本库</h4><p><code>mkdir /home/svn</code><br><code>svnadmin create /home/svn/repo1</code><br>这里在/home/svn目录下创建了一个名为repo1 的版本库。</p>
<h2 id="三、修改svn配置"><a href="#三、修改svn配置" class="headerlink" title="三、修改svn配置"></a>三、修改svn配置</h2><p>在创建完版本库后会在/svn                                                                                                                                                                          /repo1/conf 目录下生成 <strong>passwd</strong> 、<strong>authz</strong>、<strong>svnserve.conf</strong> 三个文件。</p>
<h4 id="3-1-修改-passwd-文件添加用户，设置用户密码，使用自带vim-进行编辑修改"><a href="#3-1-修改-passwd-文件添加用户，设置用户密码，使用自带vim-进行编辑修改" class="headerlink" title="3.1 修改 passwd 文件添加用户，设置用户密码，使用自带vim 进行编辑修改"></a>3.1 修改 <strong>passwd</strong> 文件添加用户，设置用户密码，使用自带vim 进行编辑修改</h4><p><code>vi /home/svn/repo1/conf/passwd</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## This file is an example password file for svnserve.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Its format is similar to that of svnserve.conf. As shown in the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## example below it contains one section labelled [users].</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## The name and password for each user follow, one account per line.</span></span></span><br><span class="line"></span><br><span class="line">[users]</span><br><span class="line"><span class="meta">#</span><span class="bash"> harry = harryssecret</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sally = sallyssecret</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户名密码也比较简单，使用vi指令直接插入 [username] = [password]，例如：</span></span><br><span class="line">username = password</span><br></pre></td></tr></table></figure></p>
<h4 id="3-2-修改-authz-文件对用户进行分组，以及配置用户读写权限"><a href="#3-2-修改-authz-文件对用户进行分组，以及配置用户读写权限" class="headerlink" title="3.2 修改 authz 文件对用户进行分组，以及配置用户读写权限"></a>3.2 修改 <strong>authz</strong> 文件对用户进行分组，以及配置用户读写权限</h4><p><code>vi /home/svn/repo1/conf/authz</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[aliases]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对用户进行别名操作,这个感觉一般很少用,毕竟我们在设置的用户名一般就不会太长</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average</span></span><br><span class="line"></span><br><span class="line">[groups]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对用户进行分组操作,如果用户比较的多，并且权限不一致的情况下,可以进行分组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 组名 = 用户名,用户名....</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> harry_and_sally = harry,sally</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> harry_sally_and_joe = harry,sally,&amp;joe</span></span><br><span class="line"></span><br><span class="line">[/]</span><br><span class="line"><span class="meta">#</span><span class="bash">具体的目录 /表示当前版本库,如果当前版本库中不同的文件夹需要区分不同的权限,可以具体的配置</span></span><br><span class="line">username = rw</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户或者组的具体的权限。svn对权限的控制分为r(读)以及w(写)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户名/组名 = 具体的权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &amp;joe = r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">[repository:/]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> @harry_and_sally = rw</span></span><br><span class="line"><span class="meta">#</span><span class="bash">* = rw</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-3-修改-svnserve-conf-文件，这是svn的具体配置文件，如果要使用到上面的-authz、-passwd，就需要修改配置该文件"><a href="#3-3-修改-svnserve-conf-文件，这是svn的具体配置文件，如果要使用到上面的-authz、-passwd，就需要修改配置该文件" class="headerlink" title="3.3 修改 svnserve.conf 文件，这是svn的具体配置文件，如果要使用到上面的 authz、 passwd，就需要修改配置该文件"></a>3.3 修改 <strong>svnserve.conf</strong> 文件，这是svn的具体配置文件，如果要使用到上面的 <strong>authz</strong>、 <strong>passwd</strong>，就需要修改配置该文件</h4><p><code>vi /home/svn/repo1/conf/authz</code><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[general]</span></span><br><span class="line"><span class="attr">anon-access</span> = read</span><br><span class="line"><span class="attr">auth-access</span> = write</span><br><span class="line"></span><br><span class="line"><span class="attr">password-db</span> = passwd</span><br><span class="line"><span class="attr">authz-db</span> = authz</span><br></pre></td></tr></table></figure></p>
<h4 id="3-4-配置完成，接下来就是开启svn的服务"><a href="#3-4-配置完成，接下来就是开启svn的服务" class="headerlink" title="3.4 配置完成，接下来就是开启svn的服务"></a>3.4 配置完成，接下来就是开启svn的服务</h4><p><code>svnserve -d -r /home/svn/</code><br>-d 指定svn在后台运行  -r 指定需要启动的版本库位置</p>
<p><strong>如果需要停止svn服务,就需要执行下面的命令进行关闭</strong><br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux |<span class="keyword">grep</span> svn   <span class="comment">#查找svn的进程id</span></span><br><span class="line"><span class="keyword">kill</span> -<span class="number">9</span> 进程id  <span class="comment">#直接关闭svn进程</span></span><br></pre></td></tr></table></figure></p>
<p>到这一步基本的svn配置就完成了，可以通过svn客户端测试是否能够正常使用。</p>
<p>查看IP地址<br><code>ip addr</code><br><img src="http://blog.zsonchen.cn//2019-01-30-16-12-14.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<p>通过svn客户端的svn checkout功能进行检出，项目svn地址为：svn://ip地址/版本库名称</p>
<h2 id="四、开启防火墙端口开放"><a href="#四、开启防火墙端口开放" class="headerlink" title="四、开启防火墙端口开放"></a>四、开启防火墙端口开放</h2><p>假如你完成了以上配置仍然无法连接的话，那么可能是防火墙给拦截了，可以先试试关闭防火墙再测试（<strong>不建议正式环境下使用</strong>），或者开放svn的端口。</p>
<h4 id="4-1-常用命令"><a href="#4-1-常用命令" class="headerlink" title="4.1 常用命令"></a>4.1 常用命令</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld       <span class="meta">#启动防火墙</span></span><br><span class="line">systemctl status firewalld       <span class="meta">#查看防火墙状态</span></span><br><span class="line">systemctl <span class="keyword">stop</span> firewalld          <span class="meta">#关闭防火墙</span></span><br><span class="line">systemctl restart firewalld       <span class="meta">#重启防火墙</span></span><br><span class="line">systemctl <span class="keyword">enable</span> firewalld.service  <span class="meta">#设置开机自启动</span></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service  <span class="meta">#关闭开机自启动</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-开启svn的端口"><a href="#4-2-开启svn的端口" class="headerlink" title="4.2 开启svn的端口"></a>4.2 开启svn的端口</h4><p>svn默认的端口是3690，在开启防火墙的同时支持svn外部访问只要执行以下步骤<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --add-port=3690/tcp --permanent </span></span><br><span class="line"><span class="bash">firewall-cmd --reload</span></span><br></pre></td></tr></table></figure></p>
<h4 id="4-3-关于防火墙配置的其他常用命令"><a href="#4-3-关于防火墙配置的其他常用命令" class="headerlink" title="4.3 关于防火墙配置的其他常用命令"></a>4.3 关于防火墙配置的其他常用命令</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --state                           <span class="comment">##查看防火墙状态，是否是running</span></span></span><br><span class="line"><span class="bash">firewall-cmd --reload                          <span class="comment">##重新载入配置，比如添加规则之后，需要执行此命令</span></span></span><br><span class="line"><span class="bash">firewall-cmd --get-zones                       <span class="comment">##列出支持的zone</span></span></span><br><span class="line"><span class="bash">firewall-cmd --get-services                    <span class="comment">##列出支持的服务，在列表中的服务是放行的</span></span></span><br><span class="line"><span class="bash">firewall-cmd --query-service ftp               <span class="comment">##查看ftp服务是否支持，返回yes或者no</span></span></span><br><span class="line"><span class="bash">firewall-cmd --add-service=ftp                 <span class="comment">##临时开放ftp服务</span></span></span><br><span class="line"><span class="bash">firewall-cmd --add-service=ftp --permanent     <span class="comment">##永久开放ftp服务</span></span></span><br><span class="line"><span class="bash">firewall-cmd --remove-service=ftp --permanent  <span class="comment">##永久移除ftp服务</span></span></span><br><span class="line"><span class="bash">firewall-cmd --add-port=80/tcp --permanent     <span class="comment">##永久添加80端口 </span></span></span><br><span class="line"><span class="bash">iptables -L -n                                 <span class="comment">##查看规则，这个命令是和iptables的相同的</span></span></span><br><span class="line"><span class="bash">man firewall-cmd                               <span class="comment">##查看帮助</span></span></span><br></pre></td></tr></table></figure>
<h2 id="五、开机自启SVN"><a href="#五、开机自启SVN" class="headerlink" title="五、开机自启SVN"></a>五、开机自启SVN</h2><h4 id="5-1-在开机自动文件中添加svn服务"><a href="#5-1-在开机自动文件中添加svn服务" class="headerlink" title="5.1 在开机自动文件中添加svn服务"></a>5.1 在开机自动文件中添加svn服务</h4><p>修改自启文件 /etc/rc.d/rc.local<br><code>vi /etc/rc.d/rc.local</code><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure</span></span><br><span class="line"><span class="comment"># that this script will be executed during boot.</span></span><br><span class="line"></span><br><span class="line">touch <span class="regexp">/var/</span>lock<span class="regexp">/subsys/</span>local</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/svnserve -d -r /</span>home<span class="regexp">/svn   #指定svn路径</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5-2-修改权限"><a href="#5-2-修改权限" class="headerlink" title="5.2 修改权限"></a>5.2 修改权限</h4><p><code>chmod -X /etc/rc.d/rc.local</code><br>修改后还是访问不了，提示没有权限，可以试着关闭selinux。</p>
<h4 id="5-3-关闭selinux"><a href="#5-3-关闭selinux" class="headerlink" title="5.3 关闭selinux"></a>5.3 关闭selinux</h4><p>selinux 的开启，容易导致文件权限修改不了等问题，下面就是关闭设置selinux的方法。<br><code>/usr/sbin/sestatus -v    #查看selinux的开启状态</code><br>修改/etc/selinux/config 文件<br><code>vi /etc/selinux/config</code><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=disabled   <span class="comment">#修改为disabled</span></span><br></pre></td></tr></table></figure></p>
<p>重启系统即可</p>
<h2 id="六、通过花生壳外网访问"><a href="#六、通过花生壳外网访问" class="headerlink" title="六、通过花生壳外网访问"></a>六、通过花生壳外网访问</h2><p>由于公用ip有限，现在大部分使用的都是动态ip，没有固定ip无法进行外网访问，这个时候我们需要做 <strong>端口映射</strong>，让外网也能访问到我们的svn。为什么使用花生壳呢，名声在外，自己做的怕安全不足。</p>
<h4 id="6-1-使用端口映射"><a href="#6-1-使用端口映射" class="headerlink" title="6.1 使用端口映射"></a>6.1 使用端口映射</h4><p>跳过注册，下载软件部分，直接讲解使用花生壳的端口映射部分。<br><img src="http://blog.zsonchen.cn//2019-01-30-17-03-16.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""><br>内网主机填写的是虚拟机的内部IP，端口如果没有修改，默认使用的是3690。<br>我们要映射的是svn的端口，所以这里选择应用类。端口映射也可以使用到挂载web项目上，如果需要使用web项目，需要修改映射类型。</p>
<h4 id="6-2-外网访问地址"><a href="#6-2-外网访问地址" class="headerlink" title="6.2 外网访问地址"></a>6.2 外网访问地址</h4><p>使用客户端svn的svn checkout功能测试，访问地址 svn://外网访问/repo1（repo1为版本库名称）<br><strong>注意：外网访问地址要包括端口</strong><br><img src="http://blog.zsonchen.cn//2019-01-30-17-07-54.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h2 id="七、附加说明"><a href="#七、附加说明" class="headerlink" title="七、附加说明"></a>七、附加说明</h2><h4 id="7-1-更换虚拟分配的IP地址"><a href="#7-1-更换虚拟分配的IP地址" class="headerlink" title="7.1 更换虚拟分配的IP地址"></a>7.1 更换虚拟分配的IP地址</h4><p>点击vmvare的编辑 - 虚拟网络编辑器<br><img src="http://blog.zsonchen.cn//2019-01-30-18-55-00.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""><br>直接修改子网ip，修改完记得重启。<br><img src="http://blog.zsonchen.cn//2019-01-30-18-56-42.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""></p>
<h4 id="7-2-应用svn的pre-commit以及post-commit"><a href="#7-2-应用svn的pre-commit以及post-commit" class="headerlink" title="7.2 应用svn的pre-commit以及post-commit"></a>7.2 应用svn的pre-commit以及post-commit</h4><p>在/svn/repo1/hooks目录下的 <strong>pree-commit</strong> 是作用是强制用户填写提交信息,以方便代码的管理。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> <span class="keyword">pre</span>-commit.tmpl <span class="keyword">pre</span>-commit  #将该模板文件重命名为<span class="keyword">pre</span>-commit文件</span><br><span class="line">chmod <span class="number">755</span> <span class="keyword">pre</span>-commit #对该文件添加可执行权限 </span><br><span class="line"><span class="keyword">vi</span> /svn/repo1/hooks/pree-commit     #修改pree-commit文件</span><br></pre></td></tr></table></figure></p>
<p>修改后代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">REPOS=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">TXN=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line">SVNLOOK=svnlook <span class="comment">#根据自己的具体情况,指定svnlook命令的具体的路径</span></span><br><span class="line">LOGMSG=`<span class="variable">$SVNLOOK</span> <span class="built_in">log</span> -t <span class="string">"<span class="variable">$TXN</span>"</span> <span class="string">"<span class="variable">$REPOS</span>"</span> | grep <span class="string">"[a-zA-Z0-9]"</span> | wc -c`</span><br><span class="line"><span class="comment">#检测提交信息的长度,如果长度小于10个字符就报错</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$LOGMSG</span>"</span> -lt 10 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Log message can't be empty! you must input more than 10 chars as comment!."</span> 1&gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p><strong>post-commit</strong> 则可以把我们提交后的文件自动更新到某一目录下。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="built_in">post</span>-commit.tmpl <span class="built_in">post</span>-commit  <span class="comment">#将该模板文件重命名为post-commit文件</span></span><br><span class="line">chmod <span class="number">755</span> <span class="built_in">post</span>-commit <span class="comment">#对该文件添加可执行权限 </span></span><br><span class="line">vi /svn/repo1/hooks/<span class="built_in">post</span>-commit     <span class="comment">#修改post-commit文件</span></span><br></pre></td></tr></table></figure></p>
<p>修改后代码如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">REPOS</span>=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="attribute">REV</span>=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"><span class="comment">#指定字符集,有的时候同步失败,可能就是字符集没有指定</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">LANG</span>=<span class="string">"zh_CN.UTF-8"</span> </span><br><span class="line"><span class="comment">#调用svn update命令 将版本库中的文件同步到/home/svn/repo1文件中去</span></span><br><span class="line"><span class="comment">#这里需要指定用户名以及密码</span></span><br><span class="line">svn update /home/svn/repo1  --username sunms --password james236 </span><br><span class="line">--no-auth-cache &gt;&gt; /var/svn-post.log</span><br></pre></td></tr></table></figure></p>
<p><img src="http://blog.zsonchen.cn/wxchat_QR.jpg" alt=""><br>链接：<a href="https://pan.baidu.com/s/1r6Y4LeolSpnwrcWGPy_nHg" target="_blank" rel="noopener">https://pan.baidu.com/s/1r6Y4LeolSpnwrcWGPy_nHg</a><br>提取码：yz8t </p>
</the>]]></content>
      
        <categories>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dagger2注解框架在kotlin中的使用]]></title>
      <url>/2018/04/19/Dagger2%E6%B3%A8%E8%A7%A3%E6%A1%86%E6%9E%B6%E5%9C%A8kotlin%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong> Dagger2注解框架在kotlin中的使用：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>本文章将会详细介绍 Dagger2 注入神器在kotlin 中的使用，由于Dagger2的概念、理论不是很清晰，我将自身的理解和使用经验写出来分享给大家，希望对大家有帮助。<br><a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br><strong>[概述]</strong>：无论是在 kotlin 还是在 java 中，使用方法大同小异，希望我的文章能帮助到大家更好的使用Dagger2。Dagger2是编译时依赖注入框架，不使用反射，解决了基于反射的开发与性能的问题。举个例子，在一个类里创建另一个类的实例，高耦合一旦动弹则牵动全身，Dagger2 可以解决这个问题。dagger2是一个依赖注入框架，在编译期间自动生成代码，负责依赖对象的创建。</the></p>
<h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><p>在Module 中的build.gradle 中引入插件，java 使用apt ，kotlin 使用kapt<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'kotlin-kapt'</span></span><br></pre></td></tr></table></figure></p>
<p>然后在dependencies{} 中引用添加依赖包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">"com.google.dagger:dagger:2.14.1"</span> </span><br><span class="line">kapt <span class="string">"com.google.dagger:dagger-compiler:2.14.1"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="二、常用注解"><a href="#二、常用注解" class="headerlink" title="二、常用注解"></a>二、常用注解</h2><p> <strong>@Inject</strong>：注入类实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Inject </span><br><span class="line">lateinit var mPresenter:MainPresenter</span><br><span class="line"></span><br><span class="line">override fun onCreate(savedInstanceState: Bundle?) &#123; </span><br><span class="line">    super.onCreate(savedInstanceState) </span><br><span class="line">    setContentView(R.layout.activity_main) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MainPresenter @Inject <span class="function"><span class="title">constructor</span></span>() &#123;</span><br><span class="line">    fun doSomething():String&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"This is result"</span> </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用@Inject 在成员变量和构造方法前面声明，可以不用调用 new classA() 进行实例化。通过注解，自动实例化。</p>
<p><strong>@Module</strong>： 自定义可注入方法的类，方法使用@Provides。</p>
<p><strong>@Provides</strong>：此注解用于标记方法，表示可以通过这个方法获取一个对象，一般用于自定义类中。</p>
<p><strong>@Component</strong>：此注解主要用于关联自定义module类和MainActivity；关联module使用：@Component(modules={UserModule.class})；关联Activity，以方法参数的形式传入MainActivity到连接器中</p>
<p><strong>@Named与@Qualifier</strong>：用于区别不同对象的实例。必须要成对出现，否则会报错。</p>
<p><strong>@PerActivity</strong>：限定对象的生命周期和Activity一样。一般应用于自定义的Component上。</p>
<p><strong>@Singleton</strong>：标记为单例模式，如果在自定义Module中使用了此注解，在自定义的Component上也要使用该注解。</p>
<p>kapt “com.google.dagger:dagger-compiler:${versions.dagger}”</p>
<p>关联Activity 与Module：<br>appComponent = DaggerAppComponent.builder().appModule(AppModule(this)).build()<br>AppModule（this）：该module 对象</p>
<p><img src="http://blog.zsonchen.cn/wxchat_QR.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android触摸事件传递机制]]></title>
      <url>/2018/03/27/Android%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><strong> Android触摸事件传递机制：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>本文章将会详细介绍Activity、View、ViewGroup三者的触摸事件传递机制，传递包括三个阶段：分发、拦截、消费。</excerpt></p>
<a id="more"></a>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>    前言：在Android开发中，经常会遇到触摸事件冲突，比如ViewPager的轮播图跟Fragment的划动事件冲突，或者轮播图跟下拉事件冲突，自定义view的事件处理等，本文章将会详细介绍Activity、View、ViewGroup三者的触摸事件传递机制，传递包括三个阶段：分发、拦截、消费。</the></p>
<h2 id="一-触摸事件的类型"><a href="#一-触摸事件的类型" class="headerlink" title="一.触摸事件的类型"></a>一.触摸事件的类型</h2><p>触摸事件对应的是 <strong>MotionEvent</strong> 类，事件类型主要有三种：</p>
<ol>
<li>ACTION_DOWN：用户按下操作，表示一次触摸事件的开始。 </li>
<li>ACTION_MOVE：在按下的情况下，进行移动。轻微的移动都会传递到该事件。</li>
<li>ACTION_UP：用户手指离开屏幕，表示一次触摸事件的</li>
</ol>
<p>注 ：如果用户仅仅的是点击而已，则只会执行到 ACTION_DOWN 和 ACTION_UP 两个事件，不会执行到 ACTION_MOVE 事件。所以 ACTION_DOWN 和 ACTION_UP 是事件是必须的。</p>
<h2 id="二-触摸事件的传递阶段"><a href="#二-触摸事件的传递阶段" class="headerlink" title="二.触摸事件的传递阶段"></a>二.触摸事件的传递阶段</h2><h3 id="1-分发（Dispatch）"><a href="#1-分发（Dispatch）" class="headerlink" title="1.分发（Dispatch）"></a>1.分发（Dispatch）</h3><p>在Android系统中所有的触摸事件都是由 <strong>dispatchTouchEvent</strong>  方法进行分发的。该方法中判断事件是被消费（<strong>return true</strong>），还是继续分发给子视图处理（<strong>return super.dispatchTouchEvent</strong>），如果当前视图是ViewGroup或者其子类，则会调用<strong>onInterceptTouchEvent</strong> 判断是否截拦。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    <span class="built_in">return</span> super.dispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-截拦（Intercept）"><a href="#2-截拦（Intercept）" class="headerlink" title="2.截拦（Intercept）"></a>2.截拦（Intercept）</h3><p>事件的截拦 <strong>InterceptTouchEvent</strong>  只存在于ViewGroup及其子类，activity和View是不存在该方法。该方法判断事件是被截拦 （<strong>return true</strong>）并交给自身的 <strong>OnToucEvent</strong> 方法进行消费，还是继续传递给子视图（<strong>return super.InterceptTouchEvent</strong> 或者 <strong>return false</strong>）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    <span class="built_in">return</span> super.onInterceptTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-消费（Consume）"><a href="#3-消费（Consume）" class="headerlink" title="3.消费（Consume）"></a>3.消费（Consume）</h3><p>事件的消费通过 <strong>OnTouchEvent</strong> 方法判断，是被消费（<strong>return true</strong>）,还是不处理（<strong>return false</strong>）并将事件传递给父视图的 <strong>OnTouchEvent</strong> 方法进行处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    <span class="built_in">return</span> super.onTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有拥有事件传递能力的类：<br>Activity： 拥有dispatchTouchEvent 、OnTouchEvent<br>ViewGroup： 拥有dispatchTouchEvent 、OnInterceptTouchEvent 、OnTouchEvent<br>View：拥有dispatchTouchEvent 、OnTouchEvent</p>
<h2 id="三、View的事件传递机制"><a href="#三、View的事件传递机制" class="headerlink" title="三、View的事件传递机制"></a>三、View的事件传递机制</h2><h3 id="3-1-dome"><a href="#3-1-dome" class="headerlink" title="3.1 dome"></a>3.1 dome</h3><p>虽然说ViewGroup是View的子类，但是这是说的View指的是除ViewGroup之外的View控件子类，首先定义一个MyTextView继承TextView，打印每次事件的触发以变了解事件传递的流程。</p>
<p>MyTextView 类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class MyTextView extends TextView &#123;</span><br><span class="line"></span><br><span class="line">    private String tag = <span class="string">"MyTextView"</span>;</span><br><span class="line"></span><br><span class="line">    public MyTextView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyTextView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>定义一个MainActivity来展现这个MyTextView，同时设置点击（onClick）和触摸（onTouch）监听。<br>MainActivity 类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener,View.OnTouchListener&#123;</span><br><span class="line">    private MyTextView mMyTextView;</span><br><span class="line">    private String tag = <span class="string">"MainActiviy"</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mMyTextView = findViewById(R.id.text_view);</span><br><span class="line">        //  点击监听</span><br><span class="line">        mMyTextView.setOnClickListener(this);</span><br><span class="line">        //  触碰监听</span><br><span class="line">        mMyTextView.setOnTouchListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // MyTextView 点击事件</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        switch (view.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.text_view:</span><br><span class="line">                Log.i(tag, <span class="string">"MyTextView onClick"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // MyTextView 触碰事件</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouch(View view, MotionEvent motionEvent) &#123;</span><br><span class="line">        switch (motionEvent.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"MyTextView onTouch ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"MyTextView onTouch ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"MyTextView onTouch ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Activity　的事件分发</span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        switch (ev.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Activity 的事件消费</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-2-打印日志"><a href="#3-2-打印日志" class="headerlink" title="3.2 打印日志"></a>3.2 打印日志</h3><p>运行后，点击Text View反馈的打印日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">03-28 08:05:14.824 1219-1219/com.mvp.chenzhesheng.androidadvance I/MainActiviy: dispatchTouchEvent ACTION_DOWN</span><br><span class="line">03-28 08:05:14.824 1219-1219/com.mvp.chenzhesheng.androidadvance I/MyTextView: dispatchTouchEvent ACTION_DOWN</span><br><span class="line">03-28 08:05:14.824 1219-1219/com.mvp.chenzhesheng.androidadvance I/MainActiviy: MyTextView onTouch ACTION_DOWN</span><br><span class="line">03-28 08:05:14.824 1219-1219/com.mvp.chenzhesheng.androidadvance I/MyTextView: onTouchEvent ACTION_DOWN</span><br><span class="line">03-28 08:05:15.034 1219-1219/com.mvp.chenzhesheng.androidadvance I/MainActiviy: dispatchTouchEvent ACTION_UP</span><br><span class="line">03-28 08:05:15.034 1219-1219/com.mvp.chenzhesheng.androidadvance I/MyTextView: dispatchTouchEvent ACTION_UP</span><br><span class="line">03-28 08:05:15.034 1219-1219/com.mvp.chenzhesheng.androidadvance I/MainActiviy: MyTextView onTouch ACTION_UP</span><br><span class="line">03-28 08:05:15.034 1219-1219/com.mvp.chenzhesheng.androidadvance I/MyTextView: onTouchEvent ACTION_UP</span><br><span class="line">03-28 08:05:15.044 1219-1219/com.mvp.chenzhesheng.androidadvance I/MainActiviy: MyTextView onClick</span><br></pre></td></tr></table></figure></p>
<hr>
<p>dispatchTouchEvent 、 OnTouchEvent 这两个方法的返回值存在三种情况：</p>
<ol>
<li>直接返回true。</li>
<li>直接返回false。</li>
<li>返回父类同名方法，super.dispatchTouchEvent 或者 super.OnTouchEvent。</li>
</ol>
<p>由于拥有不同的返回值，所以事件传递流程也有不同，经过不断修改返回值测试，最终得到了点击事件的流程图，ACTION_DOWN 和 ACTION_UP 事件的传递流程是相同的。</p>
<h3 id="3-3-事件传递流程图"><a href="#3-3-事件传递流程图" class="headerlink" title="3.3 事件传递流程图"></a>3.3 事件传递流程图</h3><p><img src="http://blog.zsonchen.cn/android%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6View%E7%9A%84%E4%BC%A0%E9%80%92.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""><br>从上面的流程图可以得出结论：</p>
<ol>
<li>触摸事件是从 <strong>dispatchTouchEvent</strong>  开始的，默认返回父类同名方法 <strong>super</strong> ，事件将会依照嵌套层次从外向内传递（ <strong>MainActivity</strong> 到 <strong>MyTextView</strong> ），到达最内层的 <strong>View</strong> 时，将由 <strong>View</strong> 的 <strong>OnTouchEvent</strong>  方法处理，该方法返回 <strong>true</strong> 时进行消费不再传递，返回 <strong>false</strong> 时再由内向外传递，由外层的 <strong>OnTouchEvent</strong> 处理。</li>
<li>如果外层向内层传递过程中，人为干扰返回 <strong>true</strong> 消费，则不会继续继续像内部传递。</li>
<li><strong>View</strong> 的事件控制顺序先执行 <strong>onTouch</strong> 再执行 <strong>onClick</strong> ，如果 <strong>onTouch</strong> 返回 <strong>true</strong> 消费，则不会继续传递，也不会执行 <strong>onClick</strong> 方法。</li>
</ol>
<h2 id="四、ViewGroup的事件传递机制"><a href="#四、ViewGroup的事件传递机制" class="headerlink" title="四、ViewGroup的事件传递机制"></a>四、ViewGroup的事件传递机制</h2><h3 id="4-1-dome"><a href="#4-1-dome" class="headerlink" title="4.1 dome"></a>4.1 dome</h3><p><strong>ViewGroup</strong> 是 <strong>View</strong> 的控件容器存在，拥有 <strong>dispatchTouchEvent</strong> 、 <strong>onInterceptTouchEvent</strong> 和 <strong>onTouchEvent</strong> 三个方法，比 <strong>View</strong> 多了一个 <strong>onInterceptTouchEvent</strong> 方法。为了更好的观察，我们需要自定义 <strong>MyRelativeLayout</strong> 继承 <strong>RelativeLayout</strong> 。</p>
<p>MyRelativeLayout类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class MyRelativeLayout extends RelativeLayout &#123;</span><br><span class="line"></span><br><span class="line">    private final static String tag = <span class="string">"MyRelativeLayout"</span>;</span><br><span class="line"></span><br><span class="line">    public MyRelativeLayout(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyRelativeLayout(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        switch (ev.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        switch (ev.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"onInterceptTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"onInterceptTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"onInterceptTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        switch (event.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_UP"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_MOVE"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(tag, <span class="string">"onTouchEvent ACTION_DOWN"</span>);</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>main_activity.xml 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;com.mvp.chenzhesheng.androidadvance.MyRelativeLayout</span><br><span class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.mvp.chenzhesheng.androidadvance.MyTextView</span><br><span class="line">        android:id=<span class="string">"@+id/text_view"</span></span><br><span class="line">        android:clickable=<span class="string">"true"</span></span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:text=<span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line">&lt;/com.mvp.chenzhesheng.androidadvance.MyRelativeLayout&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-2-打印日志"><a href="#4-2-打印日志" class="headerlink" title="4.2 打印日志"></a>4.2 打印日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">04-02 08:47:57.980 1030-1030/com.mvp.chenzhesheng.androidadvance I/MainActiviy: dispatchTouchEvent ACTION_DOWN</span><br><span class="line">04-02 08:47:58.000 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyRelativeLayout: dispatchTouchEvent ACTION_DOWN</span><br><span class="line">04-02 08:47:58.000 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyRelativeLayout: onInterceptTouchEvent ACTION_DOWN</span><br><span class="line">04-02 08:47:58.000 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyTextView: dispatchTouchEvent ACTION_DOWN</span><br><span class="line">04-02 08:47:58.010 1030-1030/com.mvp.chenzhesheng.androidadvance I/MainActiviy: MyTextView onTouch ACTION_DOWN</span><br><span class="line">04-02 08:47:58.010 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyTextView: onTouchEvent ACTION_DOWN</span><br><span class="line">04-02 08:47:58.200 1030-1030/com.mvp.chenzhesheng.androidadvance I/MainActiviy: dispatchTouchEvent ACTION_UP</span><br><span class="line">04-02 08:47:58.200 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyRelativeLayout: dispatchTouchEvent ACTION_UP</span><br><span class="line">04-02 08:47:58.200 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyRelativeLayout: onInterceptTouchEvent ACTION_UP</span><br><span class="line">04-02 08:47:58.200 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyTextView: dispatchTouchEvent ACTION_UP</span><br><span class="line">04-02 08:47:58.210 1030-1030/com.mvp.chenzhesheng.androidadvance I/MainActiviy: MyTextView onTouch ACTION_UP</span><br><span class="line">04-02 08:47:58.210 1030-1030/com.mvp.chenzhesheng.androidadvance I/MyTextView: onTouchEvent ACTION_UP</span><br><span class="line">04-02 08:47:58.260 1030-1030/com.mvp.chenzhesheng.androidadvance I/MainActiviy: MyTextView onClick</span><br></pre></td></tr></table></figure>
<hr>
<p>可以看到 <strong>MainActivity</strong> 和 <strong>MyTextView</strong> 的事件传递处理中添加了一层 <strong>MyRelativeLayout</strong> 。通过不同返回值测试，得到一套流程图。</p>
<h3 id="4-3-流程图"><a href="#4-3-流程图" class="headerlink" title="4.3 流程图"></a>4.3 流程图</h3><p><img src="http://blog.zsonchen.cn/android%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6View%E3%80%81ViewGroup%E3%80%81Activity.jpg?imageView2/0/q/100|watermark/2/text/5YWs5LyX5Y-377ya5oqA5pyv5bCP5L2c5Z2K/font/5a6L5L2T/fontsize/480/fill/I0JEQjdCNw==/dissolve/50/gravity/SouthEast/dx/30/dy/30" alt=""><br>从上面的流程图可以得出结论：</p>
<ol>
<li>触摸事件传递是从 <strong>Activity</strong> 传递到 <strong>ViewGroup</strong> ,再传递到 <strong>View</strong> 。如果中间没有 <strong>ViewGroup</strong> 则直接从 <strong>Activity</strong> 传递到 <strong>View</strong> 。</li>
<li><strong>ViewGroup</strong> 通过 <strong>onInterceptTouchEvent</strong> 方法对事件进行截拦，如果返回 <strong>false</strong> 或者 <strong>super.onInterceptTouchEvent</strong> ，则事件会继续传递给子 <strong>View</strong> 。</li>
<li>子 <strong>View</strong> 中对事件进行消费后，<strong>ViewGroup</strong> 将不会接收到任何事件。</li>
</ol>
<h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h2><ol>
<li>事件分发是由外到内，从 <strong>Activity</strong> 到具体的子 <strong>View</strong> ；</li>
<li>事件处理消费是由内到外，从子 <strong>View</strong> 到最外层 <strong>Activity</strong> ；</li>
<li>事件拦截只存在于 <strong>ViewGroup</strong> 中；</li>
<li>掌握事件传递机制可以更好的进行事件处理，无论是自定义 <strong>View</strong> 还是阅读 <strong>Framework</strong> 层源码都需要对事件传递进行学习，才能更精致的开发应用。</li>
</ol>
<p><img src="http://blog.zsonchen.cn/wxchat_QR.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Ubuntu16.0.4版本linux系统下的腾讯云java后台服务器学习指南]]></title>
      <url>/2018/03/17/%E5%9F%BA%E4%BA%8EUbuntu16-0-4%E7%89%88%E6%9C%AClinux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E7%9A%84%E8%85%BE%E8%AE%AF%E4%BA%91java%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p><strong> 基于Ubuntu16.0.4版本linux系统下的腾讯云java后台服务器学习指南：</strong> <excerpt in="" index="" |="" 首页摘要=""><br>腾讯云服务器，配置java后台环境。<br><a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<pre><code>前言：本人于2018年03月06日购买了腾讯云服务器，用于java后台使用。由于是第一次使用，于是乎有了这篇文章。文章将直接跳过购买部分，来到配置java和后台环境部分。
</code></pre><p>使用工具：xshell、xftp<br>xshell：可连接远程服务器，使用命令操作远程服务器<br>xftp：用来向服务器传输文件</p>
<h2 id="一、连接服务器。"><a href="#一、连接服务器。" class="headerlink" title="一、连接服务器。"></a>一、连接服务器。</h2><h3 id="1-使用xshell连接服务器"><a href="#1-使用xshell连接服务器" class="headerlink" title="1.使用xshell连接服务器"></a>1.使用xshell连接服务器</h3><p>在腾讯云的管理页面找到购买的主机，设置用户名和密码，还有记住公网ip跟端口号。</p>
<p>打开xshell，输入服务器地址与端口号，点击连接，首次进入需输入用户名密码，这些在腾讯云后台可看到，记住密码则不用每次进入都输入。</p>
<h3 id="2-重置root权限密码"><a href="#2-重置root权限密码" class="headerlink" title="2.重置root权限密码"></a>2.重置root权限密码</h3><p>进入界面后，输入：<br><code>sudo passwd</code><br>输入新密码 + 回车 * 3次</p>
<h3 id="3-获取usr用户根目录的权限"><a href="#3-获取usr用户根目录的权限" class="headerlink" title="3.获取usr用户根目录的权限"></a>3.获取usr用户根目录的权限</h3><p>root指令<br><code>su root</code><br>输入root密码 + 回车</p>
<h2 id="二、配置java环境"><a href="#二、配置java环境" class="headerlink" title="二、配置java环境"></a>二、配置java环境</h2><h3 id="1-上传解压jdk环境压缩包"><a href="#1-上传解压jdk环境压缩包" class="headerlink" title="1.上传解压jdk环境压缩包"></a>1.上传解压jdk环境压缩包</h3><p>1.1 创建java目录：<br><code>mkdir /usr/local/java</code></p>
<p>1.2 在<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk官网</a>下载好linux对应系统位数的安装包，使用xftp上传到服务器，shell指令复制到/usr/local/java目录下</p>
<p>1.3 使用cd进入到目录下解压<br><code>sudo tar xvf jdk-8u121-linux-x64.tar.gz</code></p>
<p>1.4 删除原压缩包<br><code>sudo rm jdk-8u121-linux-x64.tar.gz</code></p>
<p>###2.更改环境变量<br>2.1 使用vim打开.bashrc环境配置文件<br><code>sudo vim ~/.bashrc</code></p>
<p>2.2 在文件结尾添加（注意文件夹名字要匹配好jdk版本号）：<br><code>export JAVA_HOME=/usr/local/java/jdk1.8.0_161</code><br><code>export JRE_HOME=${JAVA_HOME}/jre</code><br><code>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib</code><br><code>export PATH=${JAVA_HOME}/bin:$PATH</code></p>
<p>2.3 保存并退出,输入<code>:wq</code>回车</p>
<p>2.4 应用环境配置<br><code>source ~/.bashrc</code></p>
<p>2.5 检验java环境是否配置好<br><code>java -version</code><br>返回：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java version <span class="string">"1.8.0_161"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_161-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)</span><br></pre></td></tr></table></figure></p>
<p>2.6 如果出现没有权限 Permission is not allowed,需要手动修改目录权限<br><code>chmod 777 &lt;文件夹名&gt;</code></p>
<h2 id="三、配置tomcat"><a href="#三、配置tomcat" class="headerlink" title="三、配置tomcat"></a>三、配置tomcat</h2><p>###1.下载解压安装包<br>1.1 <a href="http://tomcat.apache.org/" target="_blank" rel="noopener">tomcat官网</a>下载apache-tomcat-7.0.78.tar.gz </p>
<p>1.2 解压安装包<br><code>tar -zxvf apache-tomcat-7.0.78.tar.gz</code></p>
<p>1.3 删除安装包<br><code>sudo rm apache-tomcat-7.0.78.tar.gz</code></p>
<p>###2.修改启动器<br>2.1 修改startup.sh 启动文件<br><code>cd apche-tomcat-7.0.78/bin</code><br><code>sudo vim startup.sh</code></p>
<p>2.2 在esac下面添加：<br><code>JAVA_HOME=/usr/local/java/jdk1.8.0_161</code><br><code>JRE_HOME=/usr/local/java/jdk1.8.0_161/jre</code><br><code>PATH=$JAVA_HOME/bin:$JRE_HOME:$PATH</code><br><code>CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code><br><code>TOMCAT_HOME=/home/ubuntu/apache-tomcat-7.0.78</code></p>
<p>2.3 保存退出：<code>:wq</code></p>
<p>2.4 启动tomcat<br><code>sudo ./startup.sh</code><br>返回<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Using CATALINA_BASE:   /home/ubuntu/apache-tomcat-7.0.85</span><br><span class="line">Using CATALINA_HOME:   /home/ubuntu/apache-tomcat-7.0.85</span><br><span class="line">Using CATALINA_TMPDIR: /home/ubuntu/apache-tomcat-7.0.85/temp</span><br><span class="line">Using JRE_HOME:        /usr/<span class="built_in">local</span>/java/jdk1.8.0_161</span><br><span class="line">Using CLASSPATH:       /home/ubuntu/apache-tomcat-7.0.85/bin/bootstrap.jar:/home/ubuntu/apache-tomcat-   7.0.85/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure></p>
<p>2.5 检查<br>在浏览器输入localhost:8080，可以看到tomcat首页界面。</p>
<p>2.6 关闭tomcat<br><code>sudo ./shutdown.sh</code></p>
<p>若是关闭tomcat出现<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</span><br><span class="line">At least one of these environment variable is needed to run this program</span><br></pre></td></tr></table></figure></p>
<p>因为tomcat无法识别到环境变量，则需修改setclasspath.sh文件<br><code>sudo vim setclasspath.sh</code></p>
<p>由于无法识别java_home和jre_home的环境变量，需要我们手动在文件头添加。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_161</span><br><span class="line">JRE_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_161/jre</span><br></pre></td></tr></table></figure></p>
<p>可以正常关闭tomcat，则说明修改完成。</p>
<h2 id="四、配置mysql"><a href="#四、配置mysql" class="headerlink" title="四、配置mysql"></a>四、配置mysql</h2><h3 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1.安装mysql"></a>1.安装mysql</h3><p>1.1 linux安装mysql环境很简单，只需逐步执行以下指令即可。<br><code>sudo apt-get install mysql-server</code> 期间需要设置密码<br><code>apt-get isntall mysql-client</code><br><code>sudo apt-get install libmysqlclient-dev</code></p>
<p>1.2 检查<br>查看3306端口是否正常<br><code>netstat -an | grep 3306</code><br>如果处于listen则表示安装成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN</span><br></pre></td></tr></table></figure></p>
<h3 id="2-登录mysql数据库"><a href="#2-登录mysql数据库" class="headerlink" title="2.登录mysql数据库"></a>2.登录mysql数据库</h3><p><code>mysql -u root -p</code><br>选择登录 -u 用户名为 root 输入密码 -p<br>此时输入密码就可以登录mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1705</span><br><span class="line">Server version: 5.7.21-0ubuntu0.16.04.1 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-创建远程访问mysql用户"><a href="#3-创建远程访问mysql用户" class="headerlink" title="3.创建远程访问mysql用户"></a>3.创建远程访问mysql用户</h3><p>3.1 查询表<br>显示当前的数据库<br><code>show databases;</code><br>显示当前数据库的表单<br><code>show tables;</code></p>
<p>3.2 远程访问用户<br>mysql默认是本机127.0.0.1访问数据库，想要远程访问需要开放mysql服务器并创建新的用户来访问mysql。</p>
<p>3.2.1 开放服务器修改配置文件：<br>mysql5.7以下的的配置文件在/etc/mysql/my.cnf文件内，里面有一行<code>bind-address = 127.0.0.1</code>表示只允许本地访问，将它注释掉。<br>mysql5.7版本或以上的配置文件在在/etc/mysql/mysql.conf.d目录下的mysqld.cnf文件</p>
<p>3.2.2 创建新用户赋予远程ip访问权限：<br>查询mysql的用户表<br><code>select user,authentication_string,host from mysql.user;</code></p>
<p>3.2.3 创建新用户<br><code>grant all privileges on *.* to &#39;myuser&#39; @&#39;46.224.259.19&#39; identified by &#39;password&#39; with grant option;</code><br>创建用户myuser使用password从ip 46.224.259.19连接到mysql服务器<br>当然，ip 地址处可以修改为 ‘%’，指任意ip地址，实际环境不予许，<strong>慎用</strong>。</p>
<p>3.2.4 执行完之后需要执行<code>flush privileges;</code>，重新加载数据库。<br>再查询一次：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------------+</span><br><span class="line">| user             | host          |</span><br><span class="line">+------------------+---------------+</span><br><span class="line">| myuser           | 46.224.259.19 |</span><br><span class="line">| debian-sys-maint | localhost     |</span><br><span class="line">| mysql.session    | localhost     |</span><br><span class="line">| mysql.sys        | localhost     |</span><br><span class="line">| root             | localhost     |</span><br><span class="line">+------------------+---------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>3.2.5 退出<br> <code>mysql&gt;quit;</code> 退出mysql登录</p>
<p>3.2.6 再次查一下3306端口<br><code>netstat -an | grep 3306</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN</span><br></pre></td></tr></table></figure></p>
<p>ok</p>
<p>3.2.6 删除用户: <code>mysql&gt;Delete FROM user Where User=&#39;myuser&#39; and Host=&#39;46.224.259.19&#39;;</code><br>重新载入<code>flush privileges;</code></p>
<h3 id="4-启动数据库"><a href="#4-启动数据库" class="headerlink" title="4.启动数据库"></a>4.启动数据库</h3><p>4.1 启动服务<br><code>service mysql start</code><br>4.2 停止<br><code>service mysql stop</code><br>4.3 重启<br><code>service mysql restart</code></p>
<h3 id="5-远程客户的Navicat-for-MySQL连接数据库"><a href="#5-远程客户的Navicat-for-MySQL连接数据库" class="headerlink" title="5.远程客户的Navicat for MySQL连接数据库"></a>5.远程客户的Navicat for MySQL连接数据库</h3><p>主机名或地址：&lt;你的服务器地址&gt;<br>端口：3306 （默认端口）<br>用户名: <mysql添加的用户名><br>密码：&lt;用户名对应的密码&gt;</mysql添加的用户名></p>
<p>##总结<br>1.需要学习xshell指令，才能更好的操作服务器。<br>2.xftp非常方便使用，文件传输只需拖拽过去即可，上传，没有权限的需要解锁权限。<br>3.操作usr目录需要root权限。<br>4.服务器默认地址为localhost，需要手动修改，添加访问账号。<br>5.Navicat 连接数据库出现“10061”，则是数据库不予许此ip地址访问，需要修改一下远程访问权限。</p>
<p><img src="http://blog.zsonchen.cn/wxchat_QR.jpg" alt=""></p>
</the>]]></content>
      
        <categories>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
